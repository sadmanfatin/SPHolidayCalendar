package model.entity;

import java.sql.SQLException;

import java.util.Map;

import oracle.adf.share.ADFContext;

import oracle.jbo.AttributeList;
import oracle.jbo.Key;
import oracle.jbo.domain.Date;
import oracle.jbo.domain.Number;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.EntityImpl;
import oracle.jbo.server.TransactionEvent;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Tue May 17 12:08:56 BDT 2022
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class SpCalendarLEOImpl extends EntityImpl {
    private static EntityDefImpl mDefinitionObject;

    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. Do not modify.
     */
    public enum AttributesEnum {
        DayId {
            public Object get(SpCalendarLEOImpl obj) {
                return obj.getDayId();
            }

            public void put(SpCalendarLEOImpl obj, Object value) {
                obj.setDayId((Number)value);
            }
        }
        ,
        Day {
            public Object get(SpCalendarLEOImpl obj) {
                return obj.getDay();
            }

            public void put(SpCalendarLEOImpl obj, Object value) {
                obj.setDay((Date)value);
            }
        }
        ,
        HolidayDescription {
            public Object get(SpCalendarLEOImpl obj) {
                return obj.getHolidayDescription();
            }

            public void put(SpCalendarLEOImpl obj, Object value) {
                obj.setHolidayDescription((String)value);
            }
        }
        ,
        WorkingStatus {
            public Object get(SpCalendarLEOImpl obj) {
                return obj.getWorkingStatus();
            }

            public void put(SpCalendarLEOImpl obj, Object value) {
                obj.setWorkingStatus((String)value);
            }
        }
        ,
        LastUpdatedBy {
            public Object get(SpCalendarLEOImpl obj) {
                return obj.getLastUpdatedBy();
            }

            public void put(SpCalendarLEOImpl obj, Object value) {
                obj.setLastUpdatedBy((Number)value);
            }
        }
        ,
        LastUpdatedDate {
            public Object get(SpCalendarLEOImpl obj) {
                return obj.getLastUpdatedDate();
            }

            public void put(SpCalendarLEOImpl obj, Object value) {
                obj.setLastUpdatedDate((Date)value);
            }
        }
        ,
        MonthId {
            public Object get(SpCalendarLEOImpl obj) {
                return obj.getMonthId();
            }

            public void put(SpCalendarLEOImpl obj, Object value) {
                obj.setMonthId((Number)value);
            }
        }
        ,
        DayName {
            public Object get(SpCalendarLEOImpl obj) {
                return obj.getDayName();
            }

            public void put(SpCalendarLEOImpl obj, Object value) {
                obj.setDayName((String)value);
            }
        }
        ,
        WpMonthListEO {
            public Object get(SpCalendarLEOImpl obj) {
                return obj.getWpMonthListEO();
            }

            public void put(SpCalendarLEOImpl obj, Object value) {
                obj.setWpMonthListEO((SpCalendarHEOImpl)value);
            }
        }
        ;
        private static AttributesEnum[] vals = null;
        private static int firstIndex = 0;

        public abstract Object get(SpCalendarLEOImpl object);

        public abstract void put(SpCalendarLEOImpl object, Object value);

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }
    public static final int DAYID = AttributesEnum.DayId.index();
    public static final int DAY = AttributesEnum.Day.index();
    public static final int HOLIDAYDESCRIPTION = AttributesEnum.HolidayDescription.index();
    public static final int WORKINGSTATUS = AttributesEnum.WorkingStatus.index();
    public static final int LASTUPDATEDBY = AttributesEnum.LastUpdatedBy.index();
    public static final int LASTUPDATEDDATE = AttributesEnum.LastUpdatedDate.index();
    public static final int MONTHID = AttributesEnum.MonthId.index();
    public static final int DAYNAME = AttributesEnum.DayName.index();
    public static final int WPMONTHLISTEO = AttributesEnum.WpMonthListEO.index();

    /**
     * This is the default constructor (do not remove).
     */
    public SpCalendarLEOImpl() {
    }

    /**
     * Gets the attribute value for DayId, using the alias name DayId.
     * @return the DayId
     */
    public Number getDayId() {
        return (Number)getAttributeInternal(DAYID);
    }

    /**
     * Sets <code>value</code> as the attribute value for DayId.
     * @param value value to set the DayId
     */
    public void setDayId(Number value) {
        setAttributeInternal(DAYID, value);
    }

    /**
     * Gets the attribute value for Day, using the alias name Day.
     * @return the Day
     */
    public Date getDay() {
        return (Date)getAttributeInternal(DAY);
    }

    /**
     * Sets <code>value</code> as the attribute value for Day.
     * @param value value to set the Day
     */
    public void setDay(Date value) {
        setAttributeInternal(DAY, value);
    }

    /**
     * Gets the attribute value for HolidayDescription, using the alias name HolidayDescription.
     * @return the HolidayDescription
     */
    public String getHolidayDescription() {
        return (String)getAttributeInternal(HOLIDAYDESCRIPTION);
    }

    /**
     * Sets <code>value</code> as the attribute value for HolidayDescription.
     * @param value value to set the HolidayDescription
     */
    public void setHolidayDescription(String value) {
        setAttributeInternal(HOLIDAYDESCRIPTION, value);
    }

    /**
     * Gets the attribute value for WorkingStatus, using the alias name WorkingStatus.
     * @return the WorkingStatus
     */
    public String getWorkingStatus() {
        return (String)getAttributeInternal(WORKINGSTATUS);
    }

    /**
     * Sets <code>value</code> as the attribute value for WorkingStatus.
     * @param value value to set the WorkingStatus
     */
    public void setWorkingStatus(String value) {
        setAttributeInternal(WORKINGSTATUS, value);
    }

    /**
     * Gets the attribute value for LastUpdatedBy, using the alias name LastUpdatedBy.
     * @return the LastUpdatedBy
     */
    public Number getLastUpdatedBy() {
        return (Number)getAttributeInternal(LASTUPDATEDBY);
    }

    /**
     * Sets <code>value</code> as the attribute value for LastUpdatedBy.
     * @param value value to set the LastUpdatedBy
     */
    public void setLastUpdatedBy(Number value) {
        setAttributeInternal(LASTUPDATEDBY, value);
    }

    /**
     * Gets the attribute value for LastUpdatedDate, using the alias name LastUpdatedDate.
     * @return the LastUpdatedDate
     */
    public Date getLastUpdatedDate() {
        return (Date)getAttributeInternal(LASTUPDATEDDATE);
    }

    /**
     * Sets <code>value</code> as the attribute value for LastUpdatedDate.
     * @param value value to set the LastUpdatedDate
     */
    public void setLastUpdatedDate(Date value) {
        setAttributeInternal(LASTUPDATEDDATE, value);
    }

    /**
     * Gets the attribute value for MonthId, using the alias name MonthId.
     * @return the MonthId
     */
    public Number getMonthId() {
        return (Number)getAttributeInternal(MONTHID);
    }

    /**
     * Sets <code>value</code> as the attribute value for MonthId.
     * @param value value to set the MonthId
     */
    public void setMonthId(Number value) {
        setAttributeInternal(MONTHID, value);
    }

    /**
     * Gets the attribute value for DayName, using the alias name DayName.
     * @return the DayName
     */
    public String getDayName() {
        return (String)getAttributeInternal(DAYNAME);
    }

    /**
     * Sets <code>value</code> as the attribute value for DayName.
     * @param value value to set the DayName
     */
    public void setDayName(String value) {
        setAttributeInternal(DAYNAME, value);
    }

    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index,
                                           AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value,
                                         AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }

    /**
     * @return the associated entity SpCalendarHEOImpl.
     */
    public SpCalendarHEOImpl getWpMonthListEO() {
        return (SpCalendarHEOImpl)getAttributeInternal(WPMONTHLISTEO);
    }

    /**
     * Sets <code>value</code> as the associated entity SpCalendarHEOImpl.
     */
    public void setWpMonthListEO(SpCalendarHEOImpl value) {
        setAttributeInternal(WPMONTHLISTEO, value);
    }

    /**
     * @param dayId key constituent

     * @return a Key object based on given key constituents.
     */
    public static Key createPrimaryKey(Number dayId) {
        return new Key(new Object[]{dayId});
    }

    /**
     * @return the definition object for this instance class.
     */
    public static synchronized EntityDefImpl getDefinitionObject() {
        if (mDefinitionObject == null) {
            mDefinitionObject = EntityDefImpl.findDefObject("model.entity.SpCalendarLEO");
        }
        return mDefinitionObject;
    }

    /**
     * Add attribute defaulting logic in this method.
     * @param attributeList list of attribute names/values to initialize the row
     */
    protected void create(AttributeList attributeList) {
        System.out.println("in wp holiday calendar create method ============================");
        super.create(attributeList);
        oracle.jbo.server.SequenceImpl s = new oracle.jbo.server.SequenceImpl("SP_CALENDAR_H_SEQ", getDBTransaction());
        oracle.jbo.domain.Number sVal = s.getSequenceNumber();
        this.setDayId(sVal);
    }

    /**
     * Add locking logic here.
     */
    public void lock() {
        super.lock();
    }

    /**
     * Custom DML update/insert/delete logic here.
     * @param operation the operation type
     * @param e the transaction event
     */
    protected void doDML(int operation, TransactionEvent e) {
        Map sessionScope = ADFContext.getCurrent().getSessionScope();
        String user = (String)sessionScope.get("userId");       
        if (DML_UPDATE == operation) {
            try {
                setLastUpdatedDate((Date)Date.getCurrentDate());
                setLastUpdatedBy(new oracle.jbo.domain.Number(user));
                
            } catch (SQLException f) {
                System.out.println(f.getMessage());
            }
        } else if (DML_INSERT == operation) {

           
        }
        super.doDML(operation, e);  
    }
}
