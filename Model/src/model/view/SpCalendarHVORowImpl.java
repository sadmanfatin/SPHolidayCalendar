package model.view;

import model.entity.SpCalendarLEOImpl;
import model.entity.SpCalendarHEOImpl;

import oracle.jbo.Row;
import oracle.jbo.RowIterator;
import oracle.jbo.RowSet;
import oracle.jbo.domain.Number;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.EntityImpl;
import oracle.jbo.server.ViewRowImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Sun Aug 15 17:36:34 BDT 2021
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class SpCalendarHVORowImpl extends ViewRowImpl {
    
    private void setHolidayCalendarWeeklyHoliday(String value) {
        
        String WeeklyHoliday = value;
        
        Row[]   holidayCalendarRows = this.getWpHolidayCalendarVO().getAllRowsInRange();
        
        SpCalendarLVORowImpl holidayCalendarRow ; 
        String holidayDesc = null;
        String dayValue= null;
        String workingStaus = null;
        for   ( Row  row :  holidayCalendarRows){
            holidayCalendarRow = (SpCalendarLVORowImpl)row;        
            holidayDesc = holidayCalendarRow.getHolidayDescription();
            dayValue  =    holidayCalendarRow.getDayName();
            workingStaus = holidayCalendarRow.getWorkingStatus();
            
            if( dayValue.equals(WeeklyHoliday) &&  holidayDesc != null    ) {
                
                //  The day is Festival or public holiday and not override with weekly holiday
                
            }
             
           else if( dayValue.equals(WeeklyHoliday) && workingStaus.equals("Workingday")   ) {
                // prevoiusly regular Working Day but now Weekly Holiday. If day is hr calendar holiday, it will be updated on save or page load
                
                holidayCalendarRow.setWorkingStatus("Holiday");
                holidayCalendarRow.setHolidayDescription("Weekly Holiday");
            }
            
            else if (  !dayValue.equals(WeeklyHoliday) && holidayDesc != null && holidayDesc.equals("Weekly Holiday")  ){
                 // previously Weekly Holiday but now set regular woking day .  If day is hr calendar holiday, it will be updated on save or page load
                
                holidayCalendarRow.setWorkingStatus("Workingday"); 
                holidayCalendarRow.setHolidayDescription(null); 
            }
        }
        
    }

    private Number calculateDaysCount(String string) {
        String daysType = string;
        
            
        int totalDaysCount = 0  ,  holidayCount = 0, workingdayCount = 0;
        RowIterator rs  = this.getWpHolidayCalendarVO();
        SpCalendarLVORowImpl row;
        
        while(rs.hasNext()) {
            row = (SpCalendarLVORowImpl)rs.next();
            
            totalDaysCount++;
            
            if(row.getWorkingStatus().equals("Workingday")     ){
                workingdayCount++;
            }
            else if(row.getWorkingStatus().equals("Holiday")     ){
                holidayCount++;
            }
                                       
        }
        
        
        if (daysType.equals("Total")){
            return new Number(totalDaysCount) ;
        }
        else if(daysType.equals("Workingday")){
            return new Number(workingdayCount) ;
        }
        else if (daysType.equals("Holiday")){
            return new Number(holidayCount) ;
        }
        
               
        return null;
    }

    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. Do not modify.
     */
    public enum AttributesEnum {
        MonthId {
            public Object get(SpCalendarHVORowImpl obj) {
                return obj.getMonthId();
            }

            public void put(SpCalendarHVORowImpl obj, Object value) {
                obj.setMonthId((Number)value);
            }
        }
        ,
        MonthName {
            public Object get(SpCalendarHVORowImpl obj) {
                return obj.getMonthName();
            }

            public void put(SpCalendarHVORowImpl obj, Object value) {
                obj.setMonthName((String)value);
            }
        }
        ,
        Year {
            public Object get(SpCalendarHVORowImpl obj) {
                return obj.getYear();
            }

            public void put(SpCalendarHVORowImpl obj, Object value) {
                obj.setYear((Number)value);
            }
        }
        ,
        OrgId {
            public Object get(SpCalendarHVORowImpl obj) {
                return obj.getOrgId();
            }

            public void put(SpCalendarHVORowImpl obj, Object value) {
                obj.setOrgId((Number)value);
            }
        }
        ,
        WeeklyHoliday {
            public Object get(SpCalendarHVORowImpl obj) {
                return obj.getWeeklyHoliday();
            }

            public void put(SpCalendarHVORowImpl obj, Object value) {
                obj.setWeeklyHoliday((String)value);
            }
        }
        ,
        NumberOfDays {
            public Object get(SpCalendarHVORowImpl obj) {
                return obj.getNumberOfDays();
            }

            public void put(SpCalendarHVORowImpl obj, Object value) {
                obj.setNumberOfDays((Number)value);
            }
        }
        ,
        NomberOfWorkingDays {
            public Object get(SpCalendarHVORowImpl obj) {
                return obj.getNomberOfWorkingDays();
            }

            public void put(SpCalendarHVORowImpl obj, Object value) {
                obj.setNomberOfWorkingDays((Number)value);
            }
        }
        ,
        NumberOfHolidays {
            public Object get(SpCalendarHVORowImpl obj) {
                return obj.getNumberOfHolidays();
            }

            public void put(SpCalendarHVORowImpl obj, Object value) {
                obj.setNumberOfHolidays((Number)value);
            }
        }
        ,
        WpHolidayCalendarVO {
            public Object get(SpCalendarHVORowImpl obj) {
                return obj.getWpHolidayCalendarVO();
            }

            public void put(SpCalendarHVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        HolidayCalendarSearchVO {
            public Object get(SpCalendarHVORowImpl obj) {
                return obj.getHolidayCalendarSearchVO();
            }

            public void put(SpCalendarHVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        DayLOV1 {
            public Object get(SpCalendarHVORowImpl obj) {
                return obj.getDayLOV1();
            }

            public void put(SpCalendarHVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        UintWiseWeeklyHolidayLOV1 {
            public Object get(SpCalendarHVORowImpl obj) {
                return obj.getUintWiseWeeklyHolidayLOV1();
            }

            public void put(SpCalendarHVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ;
        private static AttributesEnum[] vals = null;
        private static int firstIndex = 0;

        public abstract Object get(SpCalendarHVORowImpl object);

        public abstract void put(SpCalendarHVORowImpl object, Object value);

        public int index() {
            return SpCalendarHVORowImpl.AttributesEnum.firstIndex() + ordinal();
        }

        public static int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return SpCalendarHVORowImpl.AttributesEnum.firstIndex() + SpCalendarHVORowImpl.AttributesEnum.staticValues().length;
        }

        public static AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = SpCalendarHVORowImpl.AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int MONTHID = SpCalendarHVORowImpl.AttributesEnum.MonthId.index();
    public static final int MONTHNAME = SpCalendarHVORowImpl.AttributesEnum.MonthName.index();
    public static final int YEAR = SpCalendarHVORowImpl.AttributesEnum.Year.index();
    public static final int ORGID = SpCalendarHVORowImpl.AttributesEnum.OrgId.index();
    public static final int WEEKLYHOLIDAY = SpCalendarHVORowImpl.AttributesEnum.WeeklyHoliday.index();
    public static final int NUMBEROFDAYS = SpCalendarHVORowImpl.AttributesEnum.NumberOfDays.index();
    public static final int NOMBEROFWORKINGDAYS = SpCalendarHVORowImpl.AttributesEnum.NomberOfWorkingDays.index();
    public static final int NUMBEROFHOLIDAYS = SpCalendarHVORowImpl.AttributesEnum.NumberOfHolidays.index();
    public static final int WPHOLIDAYCALENDARVO = SpCalendarHVORowImpl.AttributesEnum.WpHolidayCalendarVO.index();
    public static final int HOLIDAYCALENDARSEARCHVO = SpCalendarHVORowImpl.AttributesEnum.HolidayCalendarSearchVO.index();
    public static final int DAYLOV1 = SpCalendarHVORowImpl.AttributesEnum.DayLOV1.index();
    public static final int UINTWISEWEEKLYHOLIDAYLOV1 = SpCalendarHVORowImpl.AttributesEnum.UintWiseWeeklyHolidayLOV1.index();

    /**
     * This is the default constructor (do not remove).
     */
    public SpCalendarHVORowImpl() {
    }

    /**
     * Gets WpMonthListEO entity object.
     * @return the WpMonthListEO
     */
    public SpCalendarHEOImpl getWpMonthListEO() {
        return (SpCalendarHEOImpl)getEntity(0);
    }

    /**
     * Gets the attribute value for MONTH_ID using the alias name MonthId.
     * @return the MONTH_ID
     */
    public Number getMonthId() {
        return (Number) getAttributeInternal(MONTHID);
    }

    /**
     * Sets <code>value</code> as attribute value for MONTH_ID using the alias name MonthId.
     * @param value value to set the MONTH_ID
     */
    public void setMonthId(Number value) {
        setAttributeInternal(MONTHID, value);
    }

    /**
     * Gets the attribute value for MONTH_NAME using the alias name MonthName.
     * @return the MONTH_NAME
     */
    public String getMonthName() {
        return (String) getAttributeInternal(MONTHNAME);
    }

    /**
     * Sets <code>value</code> as attribute value for MONTH_NAME using the alias name MonthName.
     * @param value value to set the MONTH_NAME
     */
    public void setMonthName(String value) {
        setAttributeInternal(MONTHNAME, value);
    }

    /**
     * Gets the attribute value for YEAR using the alias name Year.
     * @return the YEAR
     */
    public Number getYear() {
        return (Number) getAttributeInternal(YEAR);
    }

    /**
     * Sets <code>value</code> as attribute value for YEAR using the alias name Year.
     * @param value value to set the YEAR
     */
    public void setYear(Number value) {
        setAttributeInternal(YEAR, value);
    }

    /**
     * Gets the attribute value for ORG_ID using the alias name OrgId.
     * @return the ORG_ID
     */
    public Number getOrgId() {
        return (Number) getAttributeInternal(ORGID);
    }

    /**
     * Sets <code>value</code> as attribute value for ORG_ID using the alias name OrgId.
     * @param value value to set the ORG_ID
     */
    public void setOrgId(Number value) {
        setAttributeInternal(ORGID, value);
    }


    /**
     * Gets the attribute value for WEEKLY_HOLIDAY using the alias name WeeklyHoliday.
     * @return the WEEKLY_HOLIDAY
     */
    public String getWeeklyHoliday() {
        return (String) getAttributeInternal(WEEKLYHOLIDAY);
    }

    /**
     * Sets <code>value</code> as attribute value for WEEKLY_HOLIDAY using the alias name WeeklyHoliday.
     * @param value value to set the WEEKLY_HOLIDAY
     */
    public void setWeeklyHoliday(String value) {
      //  System.out.println("=======================  setWeeklyHoliday  =======================================");
        
        
        setAttributeInternal(WEEKLYHOLIDAY, value);
        
        setHolidayCalendarWeeklyHoliday(value);
        
        
        
    }

    /**
     * Gets the attribute value for the calculated attribute NumberOfDays.
     * @return the NumberOfDays
     */
    public Number getNumberOfDays() {
        
          return    calculateDaysCount("Total");

      //  return (Number) getAttributeInternal(NUMBEROFDAYS);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute NumberOfDays.
     * @param value value to set the  NumberOfDays
     */
    public void setNumberOfDays(Number value) {
        setAttributeInternal(NUMBEROFDAYS, value);
    }

    /**
     * Gets the attribute value for the calculated attribute NomberOfWorkingDays.
     * @return the NomberOfWorkingDays
     */
    public Number getNomberOfWorkingDays() {
        return    calculateDaysCount("Workingday");
        
      //  return (Number) getAttributeInternal(NOMBEROFWORKINGDAYS);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute NomberOfWorkingDays.
     * @param value value to set the  NomberOfWorkingDays
     */
    public void setNomberOfWorkingDays(Number value) {
        setAttributeInternal(NOMBEROFWORKINGDAYS, value);
    }

    /**
     * Gets the attribute value for the calculated attribute NumberOfHolidays.
     * @return the NumberOfHolidays
     */
    public Number getNumberOfHolidays() {
        
        return    calculateDaysCount("Holiday");
      //  return (Number) getAttributeInternal(NUMBEROFHOLIDAYS);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute NumberOfHolidays.
     * @param value value to set the  NumberOfHolidays
     */
    public void setNumberOfHolidays(Number value) {
        setAttributeInternal(NUMBEROFHOLIDAYS, value);
    }

    /**
     * Gets the associated <code>RowIterator</code> using master-detail link WpHolidayCalendarVO.
     */
    public RowIterator getWpHolidayCalendarVO() {
        return (RowIterator)getAttributeInternal(WPHOLIDAYCALENDARVO);
    }

    /**
     * Gets the associated <code>Row</code> using master-detail link HolidayCalendarSearchVO.
     */
    public Row getHolidayCalendarSearchVO() {
        return (Row)getAttributeInternal(HOLIDAYCALENDARSEARCHVO);
    }

    /**
     * Sets the master-detail link HolidayCalendarSearchVO between this object and <code>value</code>.
     */
    public void setHolidayCalendarSearchVO(Row value) {
        setAttributeInternal(HOLIDAYCALENDARSEARCHVO, value);
    }

    /**
     * Gets the view accessor <code>RowSet</code> DayLOV1.
     */
    public RowSet getDayLOV1() {
        return (RowSet)getAttributeInternal(DAYLOV1);
    }

    /**
     * Gets the view accessor <code>RowSet</code> UintWiseWeeklyHolidayLOV1.
     */
    public RowSet getUintWiseWeeklyHolidayLOV1() {
        return (RowSet)getAttributeInternal(UINTWISEWEEKLYHOLIDAYLOV1);
    }

    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index,
                                           AttributeDefImpl attrDef) throws Exception {
        if ((index >= SpCalendarHVORowImpl.AttributesEnum.firstIndex()) && (index < SpCalendarHVORowImpl.AttributesEnum.count())) {
            return SpCalendarHVORowImpl.AttributesEnum.staticValues()[index - SpCalendarHVORowImpl.AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value,
                                         AttributeDefImpl attrDef) throws Exception {
        if ((index >= SpCalendarHVORowImpl.AttributesEnum.firstIndex()) && (index < SpCalendarHVORowImpl.AttributesEnum.count())) {
            SpCalendarHVORowImpl.AttributesEnum.staticValues()[index - SpCalendarHVORowImpl.AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }
}
