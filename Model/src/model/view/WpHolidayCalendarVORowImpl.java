package model.view;

import model.entity.WpHolidayCalendarEOImpl;

import oracle.jbo.RowSet;
import oracle.jbo.domain.Date;
import oracle.jbo.domain.Number;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.ViewRowImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Tue Aug 17 12:37:02 BDT 2021
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class WpHolidayCalendarVORowImpl extends ViewRowImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. Do not modify.
     */
    public enum AttributesEnum {
        DayId {
            public Object get(WpHolidayCalendarVORowImpl obj) {
                return obj.getDayId();
            }

            public void put(WpHolidayCalendarVORowImpl obj, Object value) {
                obj.setDayId((Number)value);
            }
        }
        ,
        Day {
            public Object get(WpHolidayCalendarVORowImpl obj) {
                return obj.getDay();
            }

            public void put(WpHolidayCalendarVORowImpl obj, Object value) {
                obj.setDay((Date)value);
            }
        }
        ,
        HolidayDescription {
            public Object get(WpHolidayCalendarVORowImpl obj) {
                return obj.getHolidayDescription();
            }

            public void put(WpHolidayCalendarVORowImpl obj, Object value) {
                obj.setHolidayDescription((String)value);
            }
        }
        ,
        WorkingStatus {
            public Object get(WpHolidayCalendarVORowImpl obj) {
                return obj.getWorkingStatus();
            }

            public void put(WpHolidayCalendarVORowImpl obj, Object value) {
                obj.setWorkingStatus((String)value);
            }
        }
        ,
        LastUpdatedBy {
            public Object get(WpHolidayCalendarVORowImpl obj) {
                return obj.getLastUpdatedBy();
            }

            public void put(WpHolidayCalendarVORowImpl obj, Object value) {
                obj.setLastUpdatedBy((Number)value);
            }
        }
        ,
        LastUpdatedDate {
            public Object get(WpHolidayCalendarVORowImpl obj) {
                return obj.getLastUpdatedDate();
            }

            public void put(WpHolidayCalendarVORowImpl obj, Object value) {
                obj.setLastUpdatedDate((Date)value);
            }
        }
        ,
        MonthId {
            public Object get(WpHolidayCalendarVORowImpl obj) {
                return obj.getMonthId();
            }

            public void put(WpHolidayCalendarVORowImpl obj, Object value) {
                obj.setMonthId((Number)value);
            }
        }
        ,
        DayName {
            public Object get(WpHolidayCalendarVORowImpl obj) {
                return obj.getDayName();
            }

            public void put(WpHolidayCalendarVORowImpl obj, Object value) {
                obj.setDayName((String)value);
            }
        }
        ,
        DayStatusLOV1 {
            public Object get(WpHolidayCalendarVORowImpl obj) {
                return obj.getDayStatusLOV1();
            }

            public void put(WpHolidayCalendarVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ;
        private static AttributesEnum[] vals = null;
        private static int firstIndex = 0;

        public abstract Object get(WpHolidayCalendarVORowImpl object);

        public abstract void put(WpHolidayCalendarVORowImpl object,
                                 Object value);

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int DAYID = AttributesEnum.DayId.index();
    public static final int DAY = AttributesEnum.Day.index();
    public static final int HOLIDAYDESCRIPTION = AttributesEnum.HolidayDescription.index();
    public static final int WORKINGSTATUS = AttributesEnum.WorkingStatus.index();
    public static final int LASTUPDATEDBY = AttributesEnum.LastUpdatedBy.index();
    public static final int LASTUPDATEDDATE = AttributesEnum.LastUpdatedDate.index();
    public static final int MONTHID = AttributesEnum.MonthId.index();
    public static final int DAYNAME = AttributesEnum.DayName.index();
    public static final int DAYSTATUSLOV1 = AttributesEnum.DayStatusLOV1.index();

    /**
     * This is the default constructor (do not remove).
     */
    public WpHolidayCalendarVORowImpl() {
    }

    /**
     * Gets WpHolidayCalendarEO entity object.
     * @return the WpHolidayCalendarEO
     */
    public WpHolidayCalendarEOImpl getWpHolidayCalendarEO() {
        return (WpHolidayCalendarEOImpl)getEntity(0);
    }

    /**
     * Gets the attribute value for DAY_ID using the alias name DayId.
     * @return the DAY_ID
     */
    public Number getDayId() {
        return (Number) getAttributeInternal(DAYID);
    }

    /**
     * Sets <code>value</code> as attribute value for DAY_ID using the alias name DayId.
     * @param value value to set the DAY_ID
     */
    public void setDayId(Number value) {
        setAttributeInternal(DAYID, value);
    }

    /**
     * Gets the attribute value for DAY using the alias name Day.
     * @return the DAY
     */
    public Date getDay() {
        return (Date) getAttributeInternal(DAY);
    }

    /**
     * Sets <code>value</code> as attribute value for DAY using the alias name Day.
     * @param value value to set the DAY
     */
    public void setDay(Date value) {
        setAttributeInternal(DAY, value);
    }

    /**
     * Gets the attribute value for HOLIDAY_DESCRIPTION using the alias name HolidayDescription.
     * @return the HOLIDAY_DESCRIPTION
     */
    public String getHolidayDescription() {
        return (String) getAttributeInternal(HOLIDAYDESCRIPTION);
    }

    /**
     * Sets <code>value</code> as attribute value for HOLIDAY_DESCRIPTION using the alias name HolidayDescription.
     * @param value value to set the HOLIDAY_DESCRIPTION
     */
    public void setHolidayDescription(String value) {
        setAttributeInternal(HOLIDAYDESCRIPTION, value);
      
        
    }

    /**
     * Gets the attribute value for WORKING_STATUS using the alias name WorkingStatus.
     * @return the WORKING_STATUS
     */
    public String getWorkingStatus() {
        return (String) getAttributeInternal(WORKINGSTATUS);
    }

    /**
     * Sets <code>value</code> as attribute value for WORKING_STATUS using the alias name WorkingStatus.
     * @param value value to set the WORKING_STATUS
     */
    public void setWorkingStatus(String value) {
        setAttributeInternal(WORKINGSTATUS, value);
        if(value.equals("Workingday")){
       //    this.setHolidayDescription(null);
        }
    }

    /**
     * Gets the attribute value for LAST_UPDATED_BY using the alias name LastUpdatedBy.
     * @return the LAST_UPDATED_BY
     */
    public Number getLastUpdatedBy() {
        return (Number) getAttributeInternal(LASTUPDATEDBY);
    }

    /**
     * Sets <code>value</code> as attribute value for LAST_UPDATED_BY using the alias name LastUpdatedBy.
     * @param value value to set the LAST_UPDATED_BY
     */
    public void setLastUpdatedBy(Number value) {
        setAttributeInternal(LASTUPDATEDBY, value);
    }

    /**
     * Gets the attribute value for LAST_UPDATED_DATE using the alias name LastUpdatedDate.
     * @return the LAST_UPDATED_DATE
     */
    public Date getLastUpdatedDate() {
        return (Date) getAttributeInternal(LASTUPDATEDDATE);
    }

    /**
     * Sets <code>value</code> as attribute value for LAST_UPDATED_DATE using the alias name LastUpdatedDate.
     * @param value value to set the LAST_UPDATED_DATE
     */
    public void setLastUpdatedDate(Date value) {
        setAttributeInternal(LASTUPDATEDDATE, value);
    }

    /**
     * Gets the attribute value for MONTH_ID using the alias name MonthId.
     * @return the MONTH_ID
     */
    public Number getMonthId() {
        return (Number) getAttributeInternal(MONTHID);
    }

    /**
     * Sets <code>value</code> as attribute value for MONTH_ID using the alias name MonthId.
     * @param value value to set the MONTH_ID
     */
    public void setMonthId(Number value) {
        setAttributeInternal(MONTHID, value);
    }

    /**
     * Gets the attribute value for DAY_NAME using the alias name DayName.
     * @return the DAY_NAME
     */
    public String getDayName() {
        return (String) getAttributeInternal(DAYNAME);
    }

    /**
     * Sets <code>value</code> as attribute value for DAY_NAME using the alias name DayName.
     * @param value value to set the DAY_NAME
     */
    public void setDayName(String value) {
        setAttributeInternal(DAYNAME, value);
    }

    /**
     * Gets the view accessor <code>RowSet</code> DayStatusLOV1.
     */
    public RowSet getDayStatusLOV1() {
        return (RowSet)getAttributeInternal(DAYSTATUSLOV1);
    }

    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index,
                                           AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value,
                                         AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }
}
